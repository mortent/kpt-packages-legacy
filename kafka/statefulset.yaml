apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: default
  labels:
    app.kubernetes.io/name: kafka
    app.kubernetes.io/component: kafka
  annotations:
    config.kubernetes.io/function: |
      container:
        image: gcr.io/mortent-dev-kube/kafka-fn:latest
spec:
  podManagementPolicy: Parallel
  replicas: 42
  selector:
    matchLabels:
      app.kubernetes.io/name: kafka
      app.kubernetes.io/component: kafka
  serviceName: kafka-headless
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafka
        app.kubernetes.io/component: kafka
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: kafka
      containers:
      - name: kafka
        image: docker.io/bitnami/kafka:2.5.0-debian-10-r107
        imagePullPolicy: "IfNotPresent"
        command:
        - /scripts/setup.sh
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: "zookeeper"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "INTERNAL"
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: "INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT"
        - name: KAFKA_CFG_LISTENERS
          value: "INTERNAL://:9093,CLIENT://:9092"
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: "INTERNAL://$(MY_POD_NAME).kafka-headless.default.svc.cluster.local:9093,CLIENT://$(MY_POD_NAME).kafka-headless.default.svc.cluster.local:9092"
        - name: ALLOW_PLAINTEXT_LISTENER
          value: "yes"
        - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
          value: "false"
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx1024m -Xms1024m"
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
          value: "10000"
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
          value: "1000"
        - name: KAFKA_CFG_LOG_RETENTION_BYTES
          value: "1073741824"
        - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVALS_MS
          value: "300000"
        - name: KAFKA_CFG_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_CFG_MESSAGE_MAX_BYTES
          value: "1000012"
        - name: KAFKA_CFG_LOG_SEGMENT_BYTES
          value: "1073741824"
        - name: KAFKA_CFG_LOG_DIRS
          value: "/bitnami/kafka/data"
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_CFG_NUM_IO_THREADS
          value: "8"
        - name: KAFKA_CFG_NUM_NETWORK_THREADS
          value: "3"
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
          value: "1"
        - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
          value: "102400"
        - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
          value: "104857600"
        - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
          value: "102400"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
          value: "6000"
        ports:
        - name: kafka-client
          containerPort: 9092
        - name: kafka-internal
          containerPort: 9093
        livenessProbe:
          tcpSocket:
            port: kafka-client
          initialDelaySeconds: 10
          timeoutSeconds: 5
          failureThreshold:
          periodSeconds:
          successThreshold:
        readinessProbe:
          tcpSocket:
            port: kafka-client
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 6
          periodSeconds:
          successThreshold:
        resources:
          limits: {}
          requests: {}
        volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
      volumes:
      - name: scripts
        configMap:
          name: kafka-scripts
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "8Gi"
